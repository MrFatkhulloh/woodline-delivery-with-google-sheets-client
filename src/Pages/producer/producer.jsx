import React, { useContext, useEffect, useState } from "react";
import Layout from "../../components/layout/layout";
import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  Icon,
  Input,
  List,
  ListItem,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  Select,
  Tab,
  TabList,
  TabPanel,
  TabPanels,
  Table,
  TableContainer,
  Tabs,
  Tbody,
  Td,
  Text,
  Textarea,
  Th,
  Thead,
  Tr,
  useColorMode,
  useDisclosure,
} from "@chakra-ui/react";
import { instance } from "../../config/axios.instance.config";
import moment from "moment";
import "moment/locale/ru";
import { toast } from "react-toastify";
import { FiMeh } from "react-icons/fi";
import accounting from "accounting";
import { OpenModalContext } from "../../Contexts/ModalContext/ModalContext";

const Producer = () => {
  const {
    isOpen: statusCheckIsOpen,
    onOpen: statusCheckOnOpen,
    onClose: statusCheckOnClose,
  } = useDisclosure();
  const {
    isOpen: addProductIsOpen,
    onOpen: addProductOnOpen,
    onClose: addProductOnClose,
  } = useDisclosure();
  const [addLoading, setAddLoading] = useState(false);
  const [type, setType] = useState();
  const { types, token } = useContext(OpenModalContext);

  const { colorMode } = useColorMode();
  const [reqIndex, setReqIndex] = useState(0);
  const [orders, setOrders] = useState([]);
  const [reload, setReload] = useState(false);
  const [status, setStatus] = useState("");
  const [order, setOrder] = useState();
  const [changeLoading, setChangeLoading] = useState(false);
  const [productData, setProductData] = useState();

  useEffect(() => {
    instance
      .get(
        `/get-order-by-status?status=${
          reqIndex === 0 ? "NEW" : reqIndex === 1 ? "ACCEPTED" : "REJECTED"
        }`
      )
      .then((res) => setOrders(res.data));
  }, [reqIndex, reload]);

  const handleChangeStatus = (event, order) => {
    statusCheckOnOpen();

    setStatus(event.target.value);

    setOrder(order);
  };

  const handleChangeStatusClick = () => {
    setChangeLoading(true);
    instance.put(`/order/${order?.id}?status=${status}`).then((res) => {
      if (res.status === 200) {
        toast.success("O'zgardi !");
        setReload(!reload);
        setChangeLoading(false);
        statusCheckOnClose();
      }
    });
  };

  const handleCreateProduct = () => {
    setAddLoading(true);

    instance
      .post(
        "/warehouse-products-only-producer",
        {
          ...productData,
          sum: 0,
          cost: 0,
          sale: 0,
          qty: 1,
        },
        {
          headers: {
            token,
          },
        }
      )
      .then((res) => {
        if (res.status === 200) {
          toast.success("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑");
          setProductData();
          setReload(!reload);
          addProductOnClose();
        }
      })
      .finally(() => setAddLoading(false))
      .catch((err) => {
        console.log(err);
        if (err.message === "Network Error") {
          toast.error(
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
          );
        }
      });
  };

  return (
    <Layout>
      {/* Check change status */}

      <Modal
        blockScrollOnMount={false}
        isOpen={statusCheckIsOpen}
        onClose={statusCheckOnClose}
      >
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Text fontWeight="bold" mb="1rem">
              –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ{" "}
              {status === "REJECTED" ? "–æ—Ç–º–µ–Ω–∏—Ç—å" : "–ø—Ä–∏–Ω—è—Ç—å"} —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?
            </Text>

            <List spacing={3} borderWidth="1px" borderRadius="lg" p={4}>
              <ListItem>
                ID:{" "}
                <Text fontWeight={"bold"} display={"inline-block"}>
                  {" "}
                  {order?.order_id}
                </Text>
              </ListItem>
              <ListItem>
                –ú–û–î–ï–õ–¨:{" "}
                <Text fontWeight={"bold"} display={"inline-block"}>
                  {order?.model?.name}
                </Text>
              </ListItem>
              <ListItem>
                –ö–û–õ-–í–û:{" "}
                <Text fontWeight={"bold"} display={"inline-block"}>
                  {order?.qty}
                </Text>
              </ListItem>
              <ListItem>
                –¢–ö–ê–ù–¨:{" "}
                <Text fontWeight={"bold"} display={"inline-block"}>
                  {order?.tissue}
                </Text>
              </ListItem>
              <ListItem>
                –ü–û–î–†–û–ë–ù–û–°–¢–ò:{" "}
                <Text fontWeight={"bold"} display={"inline-block"}>
                  {order?.title}
                </Text>
              </ListItem>
            </List>
          </ModalBody>

          <ModalFooter>
            <Button
              isLoading={changeLoading}
              onClick={handleChangeStatusClick}
              colorScheme="blue"
              mr={3}
            >
              –î–∞
            </Button>
            <Button
              variant="ghost"
              onClick={() => {
                setReload(!reload);
                statusCheckOnClose();
              }}
            >
              –ù–µ—Ç
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* ADD PRODUCT MODAL */}

      <Modal isOpen={addProductIsOpen} onClose={addProductOnClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç</ModalHeader>
          <ModalCloseButton />
          <ModalBody display={"flex"} flexDirection={"column"} gap={"15px"}>
            <FormControl>
              <FormLabel>–≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞</FormLabel>
              <Input
                onChange={(e) =>
                  setProductData({ ...productData, order_id: e.target.value })
                }
                type="number"
              />
            </FormControl>

            <Box display={"flex"} gap={"20px"}>
              <FormControl>
                <FormLabel>–≤–∏–¥ –º–µ–±–µ–ª–∏</FormLabel>
                <Select
                  onChange={(e) => setType(e.target.value)}
                  placeholder="–≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –º–µ–±–µ–ª—å"
                >
                  {types?.map((t) => (
                    <option key={t.id} value={t.id}>
                      {t.name}
                    </option>
                  ))}
                </Select>
              </FormControl>
              <FormControl>
                <FormLabel>–º–æ–¥–µ–ª–∏</FormLabel>
                <Select
                  onChange={(e) =>
                    setProductData({ ...productData, model_id: e.target.value })
                  }
                  isDisabled={!type ? true : false}
                  placeholder="–≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"
                >
                  {types
                    ?.find((ft) => ft.id === type)
                    ?.models.map((m) => (
                      <option key={m.id} value={m.id}>
                        {m.name}
                      </option>
                    ))}
                </Select>
              </FormControl>
            </Box>
            <FormControl>
              <FormLabel>–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏</FormLabel>
              <Input
                onChange={(e) =>
                  setProductData({ ...productData, tissue: e.target.value })
                }
                type="text"
              />
            </FormControl>

            <Textarea
              onChange={(e) =>
                setProductData({ ...productData, title: e.target.value })
              }
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫..."
            />
          </ModalBody>

          <ModalFooter>
            <Button
              isLoading={addLoading}
              onClick={handleCreateProduct}
              colorScheme="blue"
              mr={3}
            >
              –°–æ–∑–¥–∞–≤–∞—Ç—å
            </Button>
            <Button onClick={addProductOnClose} variant="ghost">
              –ó–∞–∫—Ä—ã–≤–∞—Ç—å
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      <Tabs isFitted onChange={(index) => setReqIndex(index)}>
        <TabList>
          <Tab fontSize={{ "2xl": "2xl", xl: "xl", md: "", sm: "" }}>
            –ø—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞ üì•
          </Tab>
          <Tab
            fontSize={{ "2xl": "2xl", xl: "xl", md: "", sm: "" }}
            _selected={{ color: "#468626", borderBottom: "2px solid #468626" }}
          >
            –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ
          </Tab>
          <Tab
            fontSize={{ "2xl": "2xl", xl: "xl", md: "", sm: "" }}
            _selected={{ color: "red", borderBottom: "2px solid red" }}
          >
            –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚ùå
          </Tab>
        </TabList>

        <TabPanels>
          <TabPanel>
            <Flex justifyContent="space-between" alignItems="center">
              <Heading
                fontSize={{ base: "18px", md: "26px", lg: "32px" }}
                my={5}
              >
                –ø—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞
              </Heading>

              <Button onClick={addProductOnOpen} colorScheme="blue">
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
              </Button>
            </Flex>

            {orders?.length === 0 ? (
              <Flex
                background={colorMode === "light" ? "#fff" : ""}
                borderWidth={"1px"}
                align="center"
                justify="center"
                height="500px"
              >
                <Icon as={FiMeh} boxSize="50px" color="gray.400" />
                <Text ml="4" fontSize="lg" color="gray.400">
                  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Text>
              </Flex>
            ) : (
              <TableContainer overflowX="unset">
                <Table
                  variant="simple"
                  background={colorMode === "light" ? "#fff" : ""}
                >
                  <Thead position="sticky" top={0} zIndex="docked">
                    <Tr>
                      <Th>–î–∞—Ç–∞</Th>
                      <Th>ID</Th>
                      <Th>–í–∏–¥ –º–µ–±–µ–ª–∏</Th>
                      <Th>–º–æ–¥–µ–ª—å</Th>
                      <Th>–∫–æ–ª-–≤–æ</Th>
                      <Th>—Ç–∫–∞–Ω—å</Th>
                      <Th>–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</Th>
                      <Th>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</Th>
                      <Th>–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    {reqIndex === 0
                      ? orders?.map((order) => (
                          <Tr key={order.id}>
                            <Td>
                              {moment(order.createdAt).locale("ru").format("L")}
                            </Td>
                            <Td>{order.order_id}</Td>
                            <Td>{order.model?.furniture_type?.name}</Td>

                            <Td>{order.model?.name}</Td>
                            <Td>{order.qty}</Td>
                            <Td>{order.tissue}</Td>
                            <Td whiteSpace={"pre-wrap"}>{order.title}</Td>
                            <Td>
                              {moment(order.deal?.delivery_date)
                                .locale("ru")
                                .format("L")}
                            </Td>
                            <Td>
                              <Select
                                placeholder="–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
                                defaultValue={order.status}
                                width={200}
                                onChange={(e) => handleChangeStatus(e, order)}
                              >
                                <option value={"ACCEPTED"}>–ø—Ä–∏–Ω—è–ª ‚úÖ</option>
                                <option value={"REJECTED"}>
                                  –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π ‚ùå
                                </option>
                              </Select>
                            </Td>
                          </Tr>
                        ))
                      : null}
                  </Tbody>
                </Table>
              </TableContainer>
            )}
          </TabPanel>
          <TabPanel>
            <Flex justifyContent="space-between" alignItems="center">
              <Heading
                fontSize={{ base: "18px", md: "26px", lg: "32px" }}
                my={5}
              >
                –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Heading>

              <Button onClick={addProductOnOpen} colorScheme="blue">
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
              </Button>
            </Flex>

            {orders?.length === 0 ? (
              <Flex
                background={colorMode === "light" ? "#fff" : ""}
                borderWidth={"1px"}
                align="center"
                justify="center"
                height="500px"
              >
                <Icon as={FiMeh} boxSize="50px" color="gray.400" />
                <Text ml="4" fontSize="lg" color="gray.400">
                  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Text>
              </Flex>
            ) : (
              <TableContainer>
                <Table
                  variant="simple"
                  background={colorMode === "light" ? "#fff" : ""}
                >
                  <Thead>
                    <Tr>
                      <Th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</Th>
                      <Th>ID</Th>
                      <Th>–í–∏–¥ –º–µ–±–µ–ª–∏</Th>

                      <Th>–º–æ–¥–µ–ª—å</Th>
                      <Th>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</Th>
                      <Th>—Ç–∫–∞–Ω—å</Th>
                      <Th>–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</Th>
                      <Th>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</Th>
                      <Th>–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    {reqIndex === 1
                      ? orders?.map((order) => (
                          <Tr key={order.id}>
                            <Td>
                              {moment(order.createdAt).locale("ru").format("L")}
                            </Td>
                            <Td>{order.order_id}</Td>
                            <Td>{order.model?.furniture_type?.name}</Td>
                            <Td>{order.model?.name}</Td>
                            <Td>{order.qty}</Td>
                            <Td>{order.tissue}</Td>
                            <Td whiteSpace={"pre-wrap"}>{order.title}</Td>
                            <Td>
                              {moment(order.deal?.delivery_date)
                                .locale("ru")
                                .format("L")}
                            </Td>
                            <Td>
                              <Select
                                isDisabled={order.status === "CREATED"}
                                defaultValue={order.status}
                                width={200}
                                onChange={(e) => handleChangeStatus(e, order)}
                              >
                                {order.status === "CREATED" ? (
                                  <option>–Ω–∞ —Å–∫–ª–∞–¥</option>
                                ) : null}
                                <option value={"ACCEPTED"}>–ø—Ä–∏–Ω—è–ª ‚úÖ</option>
                                <option value={"REJECTED"}>
                                  –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π ‚ùå
                                </option>
                              </Select>
                            </Td>
                          </Tr>
                        ))
                      : null}
                  </Tbody>
                </Table>
              </TableContainer>
            )}
          </TabPanel>
          <TabPanel>
            <Flex justifyContent="space-between" alignItems="center">
              <Heading
                fontSize={{ base: "18px", md: "26px", lg: "32px" }}
                my={5}
              >
                –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
              </Heading>
            </Flex>

            {orders?.length === 0 ? (
              <Flex
                background={colorMode === "light" ? "#fff" : ""}
                borderWidth={"1px"}
                align="center"
                justify="center"
                height="500px"
              >
                <Icon as={FiMeh} boxSize="50px" color="gray.400" />
                <Text ml="4" fontSize="lg" color="gray.400">
                  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Text>
              </Flex>
            ) : (
              <TableContainer>
                <Table
                  variant="simple"
                  background={colorMode === "light" ? "#fff" : ""}
                >
                  <Thead>
                    <Tr>
                      <Th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</Th>
                      <Th>ID</Th>
                      <Th>–í–∏–¥ –º–µ–±–µ–ª–∏</Th>

                      <Th>–º–æ–¥–µ–ª—å</Th>
                      <Th>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</Th>
                      <Th>—Ç–∫–∞–Ω—å</Th>
                      <Th>–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</Th>
                      <Th>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</Th>
                      <Th>–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    {reqIndex === 2
                      ? orders?.map((order) => (
                          <Tr key={order.id}>
                            <Td>
                              {moment(order.createdAt).locale("ru").format("L")}
                            </Td>
                            <Td>{order.order_id}</Td>
                            <Td>{order.model?.furniture_type?.name}</Td>
                            <Td>{order.model?.name}</Td>
                            <Td>{order.qty}</Td>
                            <Td>{order.tissue}</Td>
                            <Td whiteSpace={"pre-wrap"}>{order.title}</Td>
                            <Td>
                              {moment(order.deal?.delivery_date)
                                .locale("ru")
                                .format("L")}
                            </Td>
                            <Td>
                              <Select
                                defaultValue={order.status}
                                width={200}
                                onChange={(e) => handleChangeStatus(e, order)}
                              >
                                <option value={"ACCEPTED"}>–ø—Ä–∏–Ω—è–ª ‚úÖ</option>
                                <option value={"REJECTED"}>
                                  –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π ‚ùå
                                </option>
                              </Select>
                            </Td>
                          </Tr>
                        ))
                      : null}
                  </Tbody>
                </Table>
              </TableContainer>
            )}
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Layout>
  );
};

export default Producer;
